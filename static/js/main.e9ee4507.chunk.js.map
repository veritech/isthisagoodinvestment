{"version":3,"sources":["LabelledValue.tsx","AssetTable.tsx","AssetDetails.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LabelledValue","props","state","value","this","format","parseValue","toString","parse","stringValue","input","setState","onChange","className","label","min","max","step","precision","formatValue","bind","valueDidChange","readOnly","readonly","React","Component","AssetTable","valueReader","indexes","Set","data","filter","index","has","map","dataSeries","v","globalEquity","gilts","propertyEquity","propertyRetainedEarnings","AssetDetails","percentFormat","currencyFormat","roi","grossYield","netYield","annualIncomeAfterExpenses","href","vanguardFundUrl","vanguardFundReturn","App","currencyFormatter","percentFormatter","Intl","NumberFormat","style","maximumFractionDigits","currency","legalCosts","mortgageFees","mortgageRate","agentFees","maintenance","housePriceGrowth","propertyValue","propertyRent","propertyDeposit","remainingValue","duty","tier","annualRentalIncome","totalDebt","initialInvestmentPlusPurchaseCosts","stampDuty","initialInvestment","purchaseCosts","giltsValue","debt","i","push","name","propertyTotalReturn","replace","numericValue","parseFloat","stripped","dataPoints","currencyParse","percentParse","console","log","width","aspect","dataKey","strokeDasharray","y","stroke","strokeWidth","opacity","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e9ee4507.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport NumericInput from \"react-numeric-input\";\n\ninterface State {\n    value: number\n}\n\ninterface Props {\n    label: string,\n    value: number,\n    onChange?: (newValue: number) => void,\n    readonly?: boolean,\n    format?: (value: number) => string,\n    parse?: (value: string) => number,\n    max?: NumericInput.BoundsFunctionProp,\n    min?: NumericInput.BoundsFunctionProp,\n    step?: number | undefined,\n}\n\nclass LabelledValue extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = props;\n    }\n\n    formatValue(value: number| null): string {\n        if (value == null) return \"\";\n        if (this.props.format) {\n            if (typeof value == \"number\") {\n                return this.props.format(value);\n            } else {\n                return this.props.format(this.parseValue(value));\n            }\n        }\n        return value.toString();\n    }\n\n    parseValue(value: string): number {\n        if (this.props.parse && value) {\n            return this.props.parse(value);\n        }\n        return 0;\n    }\n\n    valueDidChange(value: number | null, stringValue: string, input: HTMLInputElement) {\n        if (typeof value != \"number\") { return }\n        this.setState({ value });\n\n        if (this.props.onChange == null) {return}\n        this.props.onChange(value);\n    }\n\n    public render() {\n        return (\n            <div className=\"row mb-sm-4 mb-md-0\">\n                <div className=\"col-sm-auto col-md-12\">\n                    <p className=\"mb-0\">{this.props.label}</p>\n                </div>\n                <div className=\"col-sm-auto col-12\">\n                    <NumericInput\n                        min={this.props.min}\n                        max={this.props.max}\n                        step={this.props.step}\n                        precision={2}\n                        value={this.props.value}\n                        format={this.formatValue.bind(this)}\n                        parse={this.parseValue.bind(this)}\n                        onChange={this.valueDidChange.bind(this)}\n                        readOnly={this.props.readonly ? true : false}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default LabelledValue;\n","import React from \"react\";\nimport {DataPoint} from \"./App\";\n\ninterface Props {\n    data: DataPoint[],\n    format: (v: number) => string\n}\n\ninterface State {\n    \n}\n\ntype ValueReader =  (data: DataPoint) => number;\n\nclass AssetTable extends React.Component<Props, State> {\n\n    dataSeries(valueReader: ValueReader): number[] {\n        const indexes = new Set<number>([0,2,4,9,24]);\n\n        return this.props.data\n            .filter((value, index) => indexes.has(index))\n            .map( (value, index) => valueReader(value));\n    }\n\n    render() {\n        return (\n            <table className=\"table table-bordered table-sm\">\n                <tr>\n                    <th>Asset</th>\n                    <th>Year 1</th>\n                    <th>Year 3</th>\n                    <th>Year 5</th>\n                    <th>Year 10</th>\n                    <th>Year 25</th>\n                </tr>\n                <tr>\n                    <td>Global Equity</td>\n                    { this.dataSeries(v => v.globalEquity).map( v => {\n                        return <td>{ this.props.format(v) }</td>\n                    })}\n                </tr>\n                <tr>\n                    <td>Gilts</td>\n                    { this.dataSeries(v => v.gilts).map( v => {\n                        return <td>{ this.props.format(v) }</td>\n                    })}\n                </tr>\n                <tr>\n                    <td>Property Equity</td>\n                    { this.dataSeries(v => v.propertyEquity).map( v => {\n                        return <td>{ this.props.format(v) }</td>\n                    })}\n                </tr>\n                <tr>\n                    <td>Property Income</td>\n                    { this.dataSeries(v => v.propertyRetainedEarnings).map( v => {\n                        return <td>{ this.props.format(v) }</td>\n                    })}\n                </tr>\n            </table>\n        );\n    }\n}\n\nexport default AssetTable;\n","import React from \"react\";\n\ninterface Props {\n    percentFormat?: (value: number) => string\n    currencyFormat?: (value: number) => string\n    grossYield: number\n    netYield: number\n    roi: number\n    annualIncomeAfterExpenses: number\n    vanguardFundUrl: string\n    vanguardFundReturn: number\n}\n\ninterface State {\n\n}\n\nexport class AssetDetails extends React.Component<Props, State> {\n\n    percentFormat(value: number): string {\n        if (this.props.percentFormat) {\n            return this.props.percentFormat(value);\n        }\n        return value.toString();\n    }\n\n    currencyFormat(value: number): string {\n        if (this.props.currencyFormat) {\n            return this.props.currencyFormat(value);\n        }\n        return value.toString();\n    }\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-sm-12 col-md-4\">\n                    <h4>Buy to Let</h4>\n                    <p>This prospective investment has:</p>\n                    <ul>\n                        <li>ROI of <strong>{this.percentFormat(this.props.roi)}</strong> (annual return/\n                            initial investment)\n                        </li>\n                        <li>Gross yield of <strong>{this.percentFormat(this.props.grossYield)}</strong>\n                        </li>\n                        <li>Net yield of <strong>{this.percentFormat(this.props.netYield)}</strong></li>\n                    </ul>\n\n                    <p>It would\n                        generate <strong>{this.currencyFormat(this.props.annualIncomeAfterExpenses)}/year</strong>,\n                        or <strong>{this.currencyFormat(this.props.annualIncomeAfterExpenses / 12)}/month</strong> in\n                        profits</p>\n                    <p>This model doesn't account for:</p>\n                    <ul>\n                        <li><strong>Tax</strong></li>\n                        <li>Periodic remortgaging costs</li>\n                        <li>Periodic agent letting fees (eg. First months rent)</li>\n                        <li>Rental Voids</li>\n                        <li>Initial remodelling costs if any</li>\n                    </ul>\n                </div>\n                <div className=\"col-sm-12 col-md-4\">\n                    <h4>Global Equity</h4>\n                    <p>This model assumes that you invest your property deposit in <a href={this.props.vanguardFundUrl}>Vanguard\n                        FTSE Global all cap index fund</a>.\n                        Specifically the accumulation fund, which will re-invest company dividends</p>\n                    <p>It also uses the the annualized growth rate over the last 5 years which\n                        is <strong>{this.percentFormat(this.props.vanguardFundReturn)}</strong></p>\n                    <p>This model does not account for:</p>\n                    <ul>\n                        <li>Market crashes</li>\n                    </ul>\n                </div>\n                <div className=\"col-sm-12 col-md-4\">\n                    <h4>Gilts</h4>\n                    <p>Gilts are debt issued by the UK government to fund itself. While they aren't without risk\n                        they form one of the safest forms of investment.</p>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport {CartesianGrid, Legend, Line, LineChart, ReferenceLine, ResponsiveContainer, XAxis, YAxis} from 'recharts';\nimport LabelledValue from \"./LabelledValue\";\nimport AssetTable from \"./AssetTable\";\nimport {AssetDetails} from \"./AssetDetails\";\n\nexport interface DataPoint {\n    name: string,\n    globalEquity: number,\n    propertyEquity: number,\n    propertyRetainedEarnings: number,\n    propertyTotalReturn: number,\n    gilts: number,\n}\n\n// https://www.msci.com/documents/10199/4753a237-7f5a-4ef6-9f2b-9f46245402e6\n// AWCI return over last 10yr\nconst VANGUARD_FUND_URL = \"https://www.vanguardinvestor.co.uk/investments/vanguard-ftse-global-all-cap-index-fund-gbp-acc/overview\";\nconst VANGUARD_FEES = 0.005;\nconst VANGUARD_FUND_RETURN = 0.067 - VANGUARD_FEES;\n\n// GOLD return over last 10yr\n// https://dqydj.com/inflation-adjusted-gold-return-calculator/\nconst GILT_RETURN = 0.03;\n\ninterface Property {\n    value: number,\n    rent: number,\n    deposit: number,\n}\n\ninterface State {\n    data: DataPoint[],\n    legalCosts: number,\n    mortgageFees: number,\n    mortgageRate: number,\n    agentFees: number,\n    maintenance: number,\n    propertyValue: number,\n    propertyRent: number,\n    propertyDeposit: number,\n    housePriceGrowth: number,\n}\n\ninterface Props {\n\n}\n\nclass App extends React.Component<Props, State> {\n\n    private currencyFormatter: Intl.NumberFormat;\n    private percentFormatter: Intl.NumberFormat;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.percentFormatter = new Intl.NumberFormat('en-gb', {\n            style: 'percent',\n            maximumFractionDigits: 2\n        });\n\n        this.currencyFormatter = new Intl.NumberFormat('en-gb', {\n            style: 'currency',\n            currency: 'GBP'\n        });\n\n        /// Initial values\n        this.state = {\n            data: [],\n            legalCosts: 1000,\n            mortgageFees: 1000,\n            mortgageRate: 0.0315,\n            agentFees: 0.08,\n            maintenance: 0.1,\n            housePriceGrowth: 0.02,\n            propertyValue: 80750,\n            propertyRent: 575,\n            propertyDeposit: 0.25,\n        }\n    }\n\n    /// https://www.gov.uk/stamp-duty-land-tax/residential-property-rates\n    stampDuty(): number {\n        var remainingValue = this.state.propertyValue;\n        var duty = 0;\n\n        const TOP = 1500000;\n        const MID = 925000;\n        const BOTTOM = 250000;\n\n        if (remainingValue > TOP) {\n            const tier = remainingValue - TOP;\n            remainingValue = TOP;\n            duty += tier * 0.15;\n        }\n\n        if (remainingValue > MID) {\n            const tier = remainingValue - MID;\n            remainingValue = MID;\n            duty += tier * 0.13;\n        }\n\n        if (remainingValue > BOTTOM) {\n            const tier = remainingValue - BOTTOM;\n            remainingValue = BOTTOM;\n            duty += tier * 0.08;\n        }\n\n        if (remainingValue > 0) {\n            duty += remainingValue * 0.03;\n        }\n\n        return duty;\n    }\n\n    initialInvestment(): number {\n        return this.state.propertyValue * this.state.propertyDeposit;\n    }\n\n    totalDebt(): number {\n        return this.state.propertyValue * (1 - this.state.propertyDeposit);\n    }\n\n    annualIncomeAfterExpenses(): number {\n        /// rent\n        var annualRentalIncome = this.state.propertyRent * 12;\n        /// minus ongoing costs\n        annualRentalIncome -= (annualRentalIncome * this.state.agentFees);\n        annualRentalIncome -= this.state.mortgageRate * this.totalDebt();\n        annualRentalIncome -= (this.state.propertyRent * 12) * this.state.maintenance;\n        return annualRentalIncome\n    }\n\n    roi(): number {\n        return this.annualIncomeAfterExpenses() / this.initialInvestmentPlusPurchaseCosts();\n    }\n\n    grossYield(): number {\n        return (this.state.propertyRent * 12) / this.state.propertyValue;\n    }\n\n    netYield(): number {\n        return this.annualIncomeAfterExpenses() / this.state.propertyValue;\n    }\n\n    purchaseCosts(): number {\n        return this.stampDuty() + this.state.mortgageFees + this.state.legalCosts;\n    }\n\n    initialInvestmentPlusPurchaseCosts(): number {\n        return this.initialInvestment() + this.purchaseCosts();\n    }\n\n    dataPoints(): DataPoint[] {\n        let data: DataPoint[] = [];\n\n        /// Initial deposit\n        var globalEquity = this.initialInvestment();\n        var propertyValue = this.state.propertyValue;\n        var giltsValue = this.initialInvestment();\n        /// Outstanding debt\n        var debt = this.totalDebt();\n\n        /// One off Purchase costs\n        var purchaseCosts = this.purchaseCosts();\n        var propertyRetainedEarnings = 0;\n\n        for (var i = 0; i < 25; i++) {\n\n            const propertyEquity = (propertyValue - purchaseCosts - debt);\n            data.push({\n                name: \"Year \" + (i + 1),\n                propertyEquity,\n                propertyRetainedEarnings,\n                propertyTotalReturn: propertyRetainedEarnings + propertyEquity,\n                gilts: giltsValue,\n                globalEquity,\n            });\n\n            giltsValue = giltsValue * (GILT_RETURN + 1);\n            propertyValue = propertyValue * (this.state.housePriceGrowth + 1);\n            propertyRetainedEarnings += this.annualIncomeAfterExpenses();\n            globalEquity = globalEquity * (VANGUARD_FUND_RETURN + 1);\n        }\n\n        return data;\n    }\n\n    currencyFormat(value: number | null): string {\n        if (value == null) return \"\";\n        return this.currencyFormatter.format(value);\n    }\n\n    percentFormat(value: number | null): string {\n        if (value == null) return \"\";\n        return this.percentFormatter.format(value);\n    }\n\n    percentParse(value: string): number {\n        const v = value.replace(/\\%$/,\"\");\n        const numericValue =  parseFloat(v);\n        // Crappy hack to stop the percentages breaking\n        if (numericValue > 1.0) {\n            return numericValue / 100;\n        }\n        return numericValue;\n    }\n\n    currencyParse(value: string): number {\n        const stripped = value.replace(/^\\£/, \"\")\n            .replace(/\\,/,\"\");\n        return parseFloat(stripped);\n    }\n\n    render() {\n        const dataPoints = this.dataPoints();\n        return (\n            <div className=\"container \">\n                <div className=\"row jumbotron\">\n                    <div className=\"col-12\">\n                        <h1>Is this a good investment?</h1>\n                        <small>Calculate whether an investment property is a good investment relative to others</small>\n                    </div>\n                </div>\n                <div className=\"row mt-5\">\n                    <div className=\"col-sm-12 col-md-4 mb-4\">\n                        <h4>Basics</h4>\n                        <LabelledValue\n                            label=\"Property Value\"\n                            value={this.state.propertyValue}\n                            format={this.currencyFormat.bind(this)}\n                            parse={this.currencyParse.bind(this)}\n                            onChange={v => {\n                                this.setState({propertyValue: v})\n                            }}\n                        />\n                        <LabelledValue\n                            label=\"Deposit (% of property value)\"\n                            value={this.state.propertyDeposit}\n                            format={this.percentFormat.bind(this)}\n                            parse={this.percentParse.bind(this)}\n                            min={0}\n                            max={1.0}\n                            step={0.01}\n                            onChange={v => {\n                                console.log(v);\n                                this.setState({propertyDeposit: v})\n                            }}\n                        />\n                        <LabelledValue\n                            label=\"Monthly Rental\"\n                            value={this.state.propertyRent}\n                            format={this.currencyFormat.bind(this)}\n                            parse={this.currencyParse.bind(this)}\n                            onChange={v => {\n                                this.setState({propertyRent: v})\n                            }}\n                        />\n                        <LabelledValue\n                            label=\"Annual House price growth\"\n                            value={this.state.housePriceGrowth}\n                            format={this.percentFormat.bind(this)}\n                            parse={this.percentParse.bind(this)}\n                            min={0}\n                            max={1.0}\n                            step={0.01}\n                            onChange={v => {\n                                this.setState({housePriceGrowth: v})\n                            }}\n                        />\n                    </div>\n                    <div className=\"col-sm-12 col-md-4 mb-4\">\n                        <h4>Transaction Expenses</h4>\n                        <LabelledValue\n                            label=\"Stamp Duty\"\n                            value={this.stampDuty()}\n                            format={this.currencyFormat.bind(this)}\n                            parse={this.currencyParse.bind(this)}\n                            readonly={true}\n                        />\n                        <LabelledValue\n                            label=\"Legal costs\"\n                            value={this.state.legalCosts}\n                            format={this.currencyFormat.bind(this)}\n                            parse={this.currencyParse.bind(this)}\n                            onChange={v => {\n                                this.setState({legalCosts: v})\n                            }}\n                        />\n                        <LabelledValue\n                            label=\"Mortgage Arrangement fees\"\n                            value={this.state.mortgageFees}\n                            format={this.currencyFormat.bind(this)}\n                            parse={this.currencyParse.bind(this)}\n                            onChange={v => {\n                                this.setState({mortgageFees: v})\n                            }}\n                        />\n                    </div>\n                    <div className=\"col-sm-12 col-md-4\">\n                        <h4>Ongoing expenses</h4>\n                        <LabelledValue\n                            label=\"Mortgage Interest Rate (%)\"\n                            value={this.state.mortgageRate}\n                            format={this.percentFormat.bind(this)}\n                            parse={this.percentParse.bind(this)}\n                            min={0}\n                            max={1.0}\n                            step={0.01}\n                            onChange={v => {\n                                this.setState({mortgageRate: v})\n                            }}\n                        />\n                        <LabelledValue\n                            label=\"Agent fees (% of rent)\"\n                            value={this.state.agentFees}\n                            format={this.percentFormat.bind(this)}\n                            parse={this.percentParse.bind(this)}\n                            min={0}\n                            max={1.0}\n                            step={0.01}\n                            onChange={v => {\n                                this.setState({agentFees: v})\n                            }}\n                        />\n                        <LabelledValue\n                            label=\"Maintenance (% of rent)\"\n                            value={this.state.maintenance}\n                            format={this.percentFormat.bind(this)}\n                            parse={this.percentParse.bind(this)}\n                            min={0}\n                            max={1.0}\n                            step={0.01}\n                            onChange={v => {\n                                this.setState({maintenance: v})\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className=\"row mt-5\">\n                    <div className=\"col-12\">\n                        <h3>Summary</h3>\n                    </div>\n                </div>\n                <AssetDetails\n                    percentFormat={this.percentFormat.bind(this)}\n                    currencyFormat={this.currencyFormat.bind(this)}\n                    grossYield={this.grossYield()}\n                    netYield={this.netYield()}\n                    roi={this.roi()}\n                    annualIncomeAfterExpenses={this.annualIncomeAfterExpenses()}\n                    vanguardFundUrl={VANGUARD_FUND_URL}\n                    vanguardFundReturn={VANGUARD_FUND_RETURN}\n                />\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h4>How does it compare?</h4>\n                        <AssetTable\n                            format={this.currencyFormat.bind(this)}\n                            data={dataPoints}/>\n                    </div>\n                </div>\n                <div className=\"row d-none d-sm-block\">\n                    <div className=\"col-12\">\n                        <ResponsiveContainer width=\"100%\" aspect={2}>\n                            <LineChart data={dataPoints}>\n                                <XAxis dataKey=\"name\"/>\n                                <YAxis/>\n                                <CartesianGrid strokeDasharray=\"3 3\"/>\n                                <Legend/>\n                                <ReferenceLine y={this.initialInvestment()} label=\"Initial Investment\" strokeDasharray=\"3 3\"/>\n                                <Line name=\"BTL\"\n                                      dataKey=\"propertyTotalReturn\"\n                                      stroke=\"#F00\"\n                                      strokeWidth={2}/>\n                                <Line name=\"BTL Equity\"\n                                      dataKey=\"propertyEquity\"\n                                      stroke=\"#F00\"\n                                      strokeWidth={1}\n                                      opacity={0.2}/>\n                                <Line name=\"BTL Income\"\n                                      dataKey=\"propertyRetainedEarnings\"\n                                      stroke=\"#900\"\n                                      opacity={0.2}\n                                      strokeWidth={1}/>\n                                <Line name=\"Gilts (UK Bonds)\" dataKey=\"gilts\" stroke=\"#0F0\" strokeWidth={2}/>\n                                <Line name=\"Vanguard Global All Cap\" dataKey=\"globalEquity\" stroke=\"#00F\"\n                                      strokeWidth={2}/>\n                            </LineChart>\n                        </ResponsiveContainer>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}