{"version":3,"sources":["LabelledValue.tsx","AssetTable.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LabelledValue","props","state","value","this","setState","onChange","className","label","readOnly","readonly","valueDidChange","bind","format","max","min","step","React","Component","AssetTable","App","numberFormatter","Intl","NumberFormat","maximumSignificantDigits","data","legalCosts","mortgageFees","mortgageRate","agentFees","maintenance","housePriceGrowth","propertyValue","propertyRent","propertyDeposit","remainingValue","duty","tier","annualRentalIncome","totalDebt","annualIncomeAfterExpenses","initialInvestmentPlusPurchaseCosts","stampDuty","initialInvestment","purchaseCosts","globalEquity","giltsValue","debt","propertyRetainedEarnings","i","push","name","propertyEquity","gilts","dataPoints","currencyFormat","v","percentFormat","width","aspect","dataKey","strokeDasharray","y","stroke","strokeWidth","roi","grossYield","netYield","href","VANGUARD_FUND_RETURN","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0543a369.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport NumericInput, {BoundsFunctionProp} from 'react-numeric-input';\n\ninterface State {\n    value: number\n}\n\ninterface Props {\n    label: string,\n    value: number,\n    onChange?: (newValue: number) => void,\n    readonly?: boolean,\n    format: (value: number| null) => string,\n    max?: BoundsFunctionProp,\n    min?: BoundsFunctionProp,\n    step?: number | ((component: NumericInput, direction: string) => number | undefined),\n}\n\nclass LabelledValue extends React.Component<Props, State> {\n\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = props;\n    }\n\n    valueDidChange(value: number | null) {\n        if (value == null) { return }\n        this.setState({ value });\n\n        if (this.props.onChange == null) {return}\n        this.props.onChange(value);\n    }\n\n    public render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-auto\"><p>{this.props.label}</p></div>\n                <div className=\"col-auto\">\n                <NumericInput\n                    readOnly={this.props.readonly ? true : false}\n                    onChange={this.valueDidChange.bind(this)}\n                    format={this.props.format.bind(this)}\n                    value={this.props.value}\n                    max={this.props.max}\n                    min={this.props.min}\n                    step={this.props.step}\n                />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default LabelledValue;\n","import React from \"react\";\nimport {DataPoint} from \"./App\";\n\ninterface Props {\n    data: DataPoint[]\n}\n\ninterface State {\n    \n}\n\nclass AssetTable extends React.Component<Props, State> {\n    render() {\n\n        const keys = [\n            \"globalEquity\"\n        ];\n\n        return (\n            <table>\n                <tr>\n                    <td>Asset</td>\n                    <td>Year 1</td>\n                    <td>Year 3</td>\n                    <td>Year 5</td>\n                    <td>Year 10</td>\n                    <td>Year 25</td>\n                </tr>\n            </table>\n        );\n    }\n}\n\nexport default AssetTable;\n","import React from 'react';\nimport './App.css';\nimport {CartesianGrid, Legend, Line, LineChart, ReferenceLine, ResponsiveContainer, XAxis, YAxis} from 'recharts';\nimport LabelledValue from \"./LabelledValue\";\nimport AssetTable from \"./AssetTable\";\n\nexport interface DataPoint {\n    name: string,\n    globalEquity: number,\n    propertyEquity: number,\n    propertyRetainedEarnings: number,\n    gilts: number,\n}\n\n// https://www.msci.com/documents/10199/4753a237-7f5a-4ef6-9f2b-9f46245402e6\n// AWCI return over last 10yr\nconst VANGUARD_FUND_URL = \"https://www.vanguardinvestor.co.uk/investments/vanguard-ftse-global-all-cap-index-fund-gbp-acc/overview\";\nconst VANGUARD_FEES = 0.005;\nconst VANGUARD_FUND_RETURN = 0.067 - VANGUARD_FEES;\n\n// GOLD return over last 10yr\n// https://dqydj.com/inflation-adjusted-gold-return-calculator/\nconst GILT_RETURN = 0.03;\n\ninterface Property {\n    value: number,\n    rent: number,\n    deposit: number,\n}\n\ninterface State {\n    data: DataPoint[],\n    legalCosts: number,\n    mortgageFees: number,\n    mortgageRate: number,\n    agentFees: number,\n    maintenance: number,\n    propertyValue: number,\n    propertyRent: number,\n    propertyDeposit: number,\n    housePriceGrowth: number,\n}\n\ninterface Props {\n\n}\n\nclass App extends React.Component<Props, State> {\n\n    numberFormatter: Intl.NumberFormat;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.numberFormatter = new Intl.NumberFormat('en-gb', {maximumSignificantDigits: 2});\n\n        /// Initial values\n        this.state = {\n            data: [],\n            legalCosts: 1000,\n            mortgageFees: 1000,\n            mortgageRate: 0.025,\n            agentFees: 0.08,\n            maintenance: 0.1,\n            housePriceGrowth: 0.02,\n            propertyValue: 80750,\n            propertyRent: 575,\n            propertyDeposit: 0.25,\n        }\n    }\n\n    /// https://www.gov.uk/stamp-duty-land-tax/residential-property-rates\n    stampDuty(): number {\n        var remainingValue = this.state.propertyValue;\n        var duty = 0;\n\n        const TOP = 1500000;\n        const MID = 925000;\n        const BOTTOM = 250000;\n\n        if (remainingValue > TOP) {\n            const tier = remainingValue - TOP;\n            remainingValue = TOP;\n            duty += tier * 0.15;\n        }\n\n        if (remainingValue > MID) {\n            const tier = remainingValue - MID;\n            remainingValue = MID;\n            duty += tier * 0.13;\n        }\n\n        if (remainingValue > BOTTOM) {\n            const tier = remainingValue - BOTTOM;\n            remainingValue = BOTTOM;\n            duty += tier * 0.08;\n        }\n\n        if (remainingValue > 0) {\n            duty += remainingValue * 0.03;\n        }\n\n        return duty;\n    }\n\n    initialInvestment(): number {\n        return this.state.propertyValue * this.state.propertyDeposit;\n    }\n\n    totalDebt(): number {\n        return this.state.propertyValue * (1 - this.state.propertyDeposit);\n    }\n\n    annualIncomeAfterExpenses(): number {\n        /// rent\n        var annualRentalIncome = this.state.propertyRent * 12;\n        /// minus ongoing costs\n        annualRentalIncome -= (annualRentalIncome * this.state.agentFees);\n        annualRentalIncome -= this.state.mortgageRate * this.totalDebt();\n        annualRentalIncome -= (this.state.propertyRent * 12) * this.state.maintenance;\n        return annualRentalIncome\n    }\n\n    roi(): number {\n        return this.annualIncomeAfterExpenses() / this.initialInvestmentPlusPurchaseCosts();\n    }\n\n    grossYield(): number {\n        return (this.state.propertyRent * 12) / this.state.propertyValue;\n    }\n\n    netYield(): number {\n        return this.annualIncomeAfterExpenses() / this.state.propertyValue;\n    }\n\n    purchaseCosts(): number {\n        return this.stampDuty() + this.state.mortgageFees + this.state.legalCosts;\n    }\n\n    initialInvestmentPlusPurchaseCosts(): number {\n        return this.initialInvestment() + this.purchaseCosts();\n    }\n\n    dataPoints(): DataPoint[] {\n        let data: DataPoint[] = [];\n\n        /// Initial deposit\n        var globalEquity = this.initialInvestment();\n        var propertyValue = this.state.propertyValue;\n        var giltsValue = this.initialInvestment();\n        /// Outstanding debt\n        var debt = this.totalDebt();\n\n        /// One off Purchase costs\n        var purchaseCosts = this.purchaseCosts();\n        var propertyRetainedEarnings = 0;\n\n        for (var i = 0; i < 25; i++) {\n            data.push({\n                name: \"Year \" + (i + 1),\n                propertyEquity: (propertyValue - purchaseCosts - debt),\n                propertyRetainedEarnings,\n                gilts: giltsValue,\n                globalEquity,\n            });\n\n            giltsValue = giltsValue * (GILT_RETURN + 1);\n            propertyValue = propertyValue * (this.state.housePriceGrowth + 1);\n            propertyRetainedEarnings += this.annualIncomeAfterExpenses();\n            globalEquity = globalEquity * (VANGUARD_FUND_RETURN + 1);\n        }\n\n        return data;\n    }\n\n    currencyFormat(value: number | null): string {\n        if (value == null) return \"\";\n        // return \"£\" + value;\n        return value + \"\";\n    }\n\n    percentFormat(value: number | null): string {\n        if (value == null) return \"\";\n        return this.numberFormatter.format(value) + \"%\";\n    }\n\n    render() {\n        const dataPoints = this.dataPoints();\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <h1>Is this a good investment?</h1>\n                        <small>Calculate whether an investment property is a good investment relative to others</small>\n                    </div>\n                </div>\n                <div className=\"row mt-5\">\n                    <div className=\"col-sm-12 col-md-4\">\n                        <h4>Basics</h4>\n                        <LabelledValue\n                            label=\"Property Value\"\n                            value={this.state.propertyValue}\n                            format={this.currencyFormat.bind(this)}\n                            onChange={v => {\n                                this.setState({propertyValue: v})\n                            }}\n                        />\n                        <LabelledValue\n                            label=\"Deposit (% of property value)\"\n                            value={this.state.propertyDeposit}\n                            format={this.percentFormat.bind(this)}\n                            min={0}\n                            max={1.0}\n                            step={0.01}\n                            onChange={v => {\n                                this.setState({propertyDeposit: v})\n                            }}\n                        />\n                        <LabelledValue\n                            label=\"Monthly Rental\"\n                            value={this.state.propertyRent}\n                            format={this.currencyFormat.bind(this)}\n                            onChange={v => {\n                                this.setState({propertyRent: v})\n                            }}\n                        />\n                        <LabelledValue\n                            label=\"Annual House price growth\"\n                            value={this.state.housePriceGrowth}\n                            format={this.percentFormat.bind(this)}\n                            min={0}\n                            max={1.0}\n                            step={0.01}\n                            onChange={v => {\n                                this.setState({housePriceGrowth: v})\n                            }}\n                        />\n                    </div>\n                    <div className=\"col-sm-12 col-md-4\">\n                        <h4>Transaction Expenses</h4>\n                        <LabelledValue\n                            label=\"Stamp Duty\"\n                            value={this.stampDuty()}\n                            format={this.currencyFormat.bind(this)}\n                            readonly={true}\n                        />\n                        <LabelledValue\n                            label=\"Legal costs\"\n                            value={this.state.legalCosts}\n                            format={this.currencyFormat.bind(this)}\n                            onChange={v => {\n                                this.setState({legalCosts: v})\n                            }}\n                        />\n                        <LabelledValue\n                            label=\"Mortgage Arrangement fees\"\n                            value={this.state.mortgageFees}\n                            format={this.currencyFormat.bind(this)}\n                            onChange={v => {\n                                this.setState({mortgageFees: v})\n                            }}\n                        />\n                    </div>\n                    <div className=\"col-sm-12 col-md-4\">\n                        <h4>Ongoing expenses</h4>\n                        <LabelledValue\n                            label=\"Mortgage Interest Rate (%)\"\n                            value={this.state.mortgageRate}\n                            format={this.percentFormat.bind(this)}\n                            min={0}\n                            max={1.0}\n                            step={0.01}\n                            onChange={v => {\n                                this.setState({mortgageRate: v})\n                            }}\n                        />\n                        <LabelledValue\n                            label=\"Agent fees (% of rent)\"\n                            value={this.state.agentFees}\n                            format={this.percentFormat.bind(this)}\n                            min={0}\n                            max={1.0}\n                            step={0.01}\n                            onChange={v => {\n                                this.setState({agentFees: v})\n                            }}\n                        />\n                        <LabelledValue\n                            label=\"Maintenance (% of rent)\"\n                            value={this.state.maintenance}\n                            format={this.percentFormat.bind(this)}\n                            min={0}\n                            max={1.0}\n                            step={0.01}\n                            onChange={v => {\n                                this.setState({maintenance: v})\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className=\"row mt-5\">\n                    <div className=\"col-12\">\n                        <ResponsiveContainer width=\"100%\" aspect={2}>\n                            <LineChart data={dataPoints}>\n                                <XAxis dataKey=\"name\"/>\n                                <YAxis/>\n                                <CartesianGrid strokeDasharray=\"3 3\" />\n                                <Legend/>\n                                <ReferenceLine y={this.initialInvestment()} label=\"Break-even\" strokeDasharray=\"3 3\"/>\n                                <Line name=\"BTL Equity\" dataKey=\"propertyEquity\" stroke=\"#F00\" strokeWidth={2}/>\n                                <Line name=\"BTL Income\" dataKey=\"propertyRetainedEarnings\" stroke=\"#900\" strokeWidth={2}/>\n                                <Line name=\"Gilts (UK Bonds)\" dataKey=\"gilts\" stroke=\"#0F0\" strokeWidth={2}/>\n                                <Line name=\"Vanguard Global All Cap\" dataKey=\"globalEquity\" stroke=\"#00F\" strokeWidth={2}/>\n                            </LineChart>\n                        </ResponsiveContainer>\n                    </div>\n                    <div className=\"col-12\">\n                        <AssetTable data={dataPoints} />\n                    </div>\n                </div>\n                <div className=\"row mt-5\">\n                    <div className=\"col-sm-12 col-md-4\">\n                        <h2>Buy to Let</h2>\n                        <p>This prospective investment has:</p>\n                        <ul>\n                            <li>ROI of <strong>{this.numberFormatter.format(this.roi() * 100)}%</strong> (annual return/ initial investment)</li>\n                            <li>Gross yield of <strong>{this.numberFormatter.format(this.grossYield() * 100)}</strong></li>\n                            <li>Net yield of <strong>{this.numberFormatter.format(this.netYield() * 100)}</strong></li>\n                        </ul>\n\n                        <p>It would generate <strong>£{this.numberFormatter.format(this.annualIncomeAfterExpenses())}/year</strong>, or <strong>£{this.numberFormatter.format(this.annualIncomeAfterExpenses()/12)}/month</strong> in profits</p>\n                        <p>This model doesn't account for:</p>\n                        <ul>\n                            <li><strong>Tax</strong></li>\n                            <li>periodic remortgaging costs</li>\n                            <li>Voids</li>\n                            <li>Agent letting fees</li>\n                            <li>Initial remodelling costs if any</li>\n                        </ul>\n                    </div>\n                    <div className=\"col-sm-12 col-md-4\">\n                        <h2>Global Equity</h2>\n                        <p>This model assumes that you invest your property deposit in <a href={VANGUARD_FUND_URL}>Vanguard FTSE Global all cap index fund</a>.\n                            Specifically the accumulation fund, which will re-invest company dividends</p>\n                        <p>It also uses the the annualized growth rate over the last 5 years which is <strong>{this.numberFormatter.format(VANGUARD_FUND_RETURN* 100)}%</strong></p>\n                        <p>This model does not account for:</p>\n                        <ul>\n                            <li>Market crashes</li>\n                        </ul>\n                    </div>\n                    <div className=\"col-sm-12 col-md-4\">\n                        <h2>Gilts</h2>\n                        <p>Gilts are debt issued by the UK government to fund itself. While they aren't without risk they form one of the safest forms of investment.</p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}